🧠 How Chat Completion Works - Complete Guide

🔑 Step 1: Creating an OpenAI API Key

Sign up for OpenAI

Generate API Key

Secure Your API Key
Never hardcode API keys in your code!
Instead, use environment variables

import os
from openai import OpenAI

Set environment variable
In terminal: 

Mac
$env:OPENAI_API_KEY='your-api-key-here'

Windows
setx OPENAI_API_KEY 'your-api-key-here'

client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

📝 Step 2: Installing Required Packages

Required Packages
pip install openai

💬 Step 3: Preparing Your Messages

Understanding Message Roles
messages = [
    # System: Sets the assistant's behavior and personality
    {
        "role": "system", 
        "content": "You are a helpful assistant specializing in programming history."
    },
    
    # User: Your questions or inputs
    {
        "role": "user", 
        "content": "What is the first programming language?"
    },
    
    # Assistant: Model's previous responses (for conversation history)
    {
        "role": "assistant",
        "content": "The first high-level programming language is Fortran, developed in the 1950s."
    },
    
    # Follow-up user message
    {
        "role": "user",
        "content": "Who created it and when exactly?"
    }
]


Advanced Message Examples

Example with more context
detailed_messages = [
    {
        "role": "system",
        "content": """You are an expert computer science historian. 
        Provide accurate, detailed information with dates and key people.
        Always cite your sources when possible."""
    },
    {
        "role": "user", 
        "content": "Tell me about the evolution of programming languages from the beginning."
    }
]


🚀 Step 4: Making the API Call

Basic API Call

import os
from openai import OpenAI

# Initialize client
client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

# Prepare messages
messages = [
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "What is the first programming language?"}
]

# Make API call
response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=messages
)

Advanced API Call with Parameters

response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=messages,
    temperature=0.7,        # Controls randomness (0.0 to 2.0)
    max_tokens=150,         # Maximum response length
    top_p=0.9,             # Diversity control
    frequency_penalty=0.1,  # Reduce repetition
    presence_penalty=0.1,   # Encourage new topics
    stream=False           # For real-time streaming
)


📊 Step 5: Handling the Response

Basic Response Extraction

assistant_response = response.choices[0].message.content
print(assistant_response)
